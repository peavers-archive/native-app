name: native-app
on:
  push:
    tags:
      - "v*"
    branches:
      - 'master'

jobs:
  build-jar-job:
    name: 'Build JAR'
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Java 11'
        uses: actions/setup-java@v2.3.1
        with:
          distribution: adopt
          java-version: 11

      - name: 'Build JAR'
        run: |
          ./gradlew bootJar
      - name: 'Get Version Number'
        run: |
          echo "::set-env name=VERSION::$(./gradlew properties -q | grep "version:" | awk '{print $2}')"
      - name: 'Publish JAR'
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'native-app-${{env.VERSION}}.jar'
          path: build/libs/*.jar

      - name: 'Create Release'
        if: contains(github.ref, 'v')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: Release ${{github.ref}}
          body: |
            Initial release
          draft: false
          prerelease: false

      - name: 'Upload Release Asset'
        if: contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: build/libs/native-app-${{env.VERSION}}.jar
          asset_name: native-app-${{env.VERSION}}.jar
          asset_content_type: application/java-archive

      - name: 'Write Upload URL To File'
        if: contains(github.ref, 'v')
        run: |
          echo "${{steps.create_release.outputs.upload_url}}" > upload_url.txt
      - name: 'Publish Upload URL'
        if: contains(github.ref, 'v')
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'upload_url.txt'
          path: 'upload_url.txt'

  build-non-windows-image:
    name: 'Build Non-Windows Image'
    needs: [ build-jar-job ]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest' ]
        include:
          - os: 'ubuntu-latest'
            label: 'linux'
          - os: 'macos-latest'
            label: 'mac'
    runs-on: ${{matrix.os}}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup Java 11'
        uses: actions/setup-java@v2.3.1
        with:
          distribution: adopt
          java-version: 11

      - name: 'Setup GraalVM Environment'
        uses: DeLaGuardo/setup-graalvm@5.0
        with:
          graalvm: '21.2.0'
          java: 'java11'

      - name: 'Install Native Image Plugin'
        run: |
          gu install native-image
      - name: 'Get Version Number'
        run: |
          echo "::set-env name=VERSION::$(./gradlew properties -q | grep "version:" | awk '{print $2}')"
      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v2-preview
        with:
          name: 'native-app-${{env.VERSION}}.jar'

      - name: 'Get Release URL'
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2-preview
        with:
          name: 'upload_url.txt'

      - name: 'Get Upload URL'
        if: contains(github.ref, 'v')
        run: |
          echo "::set-env name=UPLOAD_URL::$(cat upload_url.txt)"
      - name: 'Build Native Image'
        run: |
          native-image --no-server --no-fallback --allow-incomplete-classpath -jar native-app-${{env.VERSION}}.jar
      - name: 'Publish Native Image'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'native-app-${{env.VERSION}}-${{matrix.label}}'
          path: 'native-app-${{env.VERSION}}'

      - name: 'Release Native Image Asset'
        if: success() && contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: 'native-app-${{env.VERSION}}-${{matrix.label}}'
          asset_path: 'native-app-${{env.VERSION}}'
          asset_content_type: application/octet-stream

  build-windows-image:
    needs: [ build-jar-job ]
    name: 'Build Windows Image'
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:

      - name: 'Checkout'
        uses: actions/checkout@v1

      - name: 'Download GraalVM'
        run: |
          Invoke-RestMethod -Uri https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.2.0/graalvm-ce-java11-windows-amd64-21.2.0.zip -OutFile 'graal.zip'
      - name: 'Install GraalVM'
        run: |
          Expand-Archive -path 'graal.zip' -destinationpath '.'
      - name: 'Install Native Image'
        run: |
          graalvm-ce-java11-21.2.0\bin\gu.cmd install native-image
      - name: 'Set up Visual C Build Tools Workload for Visual Studio 2017 Build Tools'
        run: |
          choco install visualstudio2017-workload-vctools
      - name: 'Get Version Number'
        run: |
          echo "::set-env name=VERSION::$(./gradlew properties -q | grep "version:" | awk '{print $2}')"
        shell: bash

      - name: 'Get JAR Artifact'
        uses: actions/download-artifact@v2-preview
        with:
          name: 'native-app-${{env.VERSION}}.jar'

      - name: 'Build Native Image'
        shell: cmd
        env:
          JAVA_HOME: ./graalvm-ce-java11-21.2.0
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          ./graalvm-ce-java11-21.2.0/bin/native-image --no-server --no-fallback --allow-incomplete-classpath -jar native-app-${{env.VERSION}}.jar
      - name: 'Get Release URL'
        if: contains(github.ref, 'v')
        uses: actions/download-artifact@v2-preview
        with:
          name: 'upload_url.txt'

      - name: 'Get Upload URL'
        if: contains(github.ref, 'v')
        run: |
          echo "::set-env name=UPLOAD_URL::$(cat upload_url.txt)"
        shell: bash

      - name: 'Publish Windows Image'
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: 'native-app-${{env.VERSION}}-windows.exe'
          path: 'native-app-${{env.VERSION}}.exe'

      - name: 'Release Windows Image Asset'
        if: success() && contains(github.ref, 'v')
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          upload_url: ${{env.UPLOAD_URL}}
          asset_name: 'native-app-${{env.VERSION}}-windows.exe'
          asset_path: 'native-app-${{env.VERSION}}.exe'
          asset_content_type: application/octet-stream
